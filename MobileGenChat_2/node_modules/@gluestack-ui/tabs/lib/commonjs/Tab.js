"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tab = void 0;
var _focus = require("@react-native-aria/focus");
var _react = _interopRequireWildcard(require("react"));
var _interactions = require("@react-native-aria/interactions");
var _utils = require("@gluestack-ui/utils");
var _TabProvider = require("./TabProvider");
var _useTabs = require("./useTabs");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const Tab = StyledTab => /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(({
  value,
  children,
  ...props
}, ref) => {
  const {
    focusProps: focusRingProps,
    isFocusVisible
  } = (0, _focus.useFocusRing)();
  const {
    pressProps,
    isPressed
  } = (0, _interactions.usePress)({
    isDisabled: props.disabled ?? undefined
  });
  const {
    isFocused,
    focusProps
  } = (0, _focus.useFocus)();
  const {
    isHovered,
    hoverProps
  } = (0, _interactions.useHover)();
  const {
    onChange,
    currentActiveTab
  } = (0, _TabProvider.useTab)('TabContext');
  const {
    tabProps
  } = (0, _useTabs.useTabs)();
  (0, _react.useEffect)(() => {
    if (isFocusVisible) {
      onChange(value);
    }
  }, [isFocusVisible, onChange, value]);
  return /*#__PURE__*/_react.default.createElement(StyledTab, _extends({
    accessiblityRole: "tab",
    ref: ref,
    states: {
      hover: isHovered,
      focus: isFocused,
      active: value === currentActiveTab,
      focusVisible: isFocusVisible
    },
    dataSet: {
      hover: isHovered ? 'true' : 'false',
      focus: isFocused ? 'true' : 'false',
      active: value === currentActiveTab ? 'true' : 'false',
      focusVisible: isFocusVisible ? 'true' : 'false'
    },
    tabIndex: value === currentActiveTab ? 0 : -1
  }, props, {
    onPressIn: (0, _utils.composeEventHandlers)(props === null || props === void 0 ? void 0 : props.onPressIn, pressProps.onPressIn),
    onPressOut: () => onChange(value),
    onPress: (0, _utils.composeEventHandlers)(props === null || props === void 0 ? void 0 : props.onPress, pressProps.onPress)
    // @ts-ignore - web only
    ,
    onHoverIn: (0, _utils.composeEventHandlers)(props === null || props === void 0 ? void 0 : props.onHoverIn, hoverProps.onHoverIn)
    // @ts-ignore - web only
    ,
    onHoverOut: (0, _utils.composeEventHandlers)(props === null || props === void 0 ? void 0 : props.onHoverOut, hoverProps.onHoverOut)
    // @ts-ignore - web only
    ,
    onFocus: (0, _utils.composeEventHandlers)((0, _utils.composeEventHandlers)(props === null || props === void 0 ? void 0 : props.onFocus, focusProps.onFocus), focusRingProps.onFocus)
    // @ts-ignore - web only
    ,
    onBlur: (0, _utils.composeEventHandlers)((0, _utils.composeEventHandlers)(props === null || props === void 0 ? void 0 : props.onBlur, focusProps.onBlur), focusRingProps.onBlur)
  }, tabProps), typeof children === 'function' ? children({
    hovered: isHovered,
    active: value === currentActiveTab,
    pressed: isPressed,
    focused: isFocused
  }) : children);
}));
exports.Tab = Tab;
//# sourceMappingURL=Tab.js.map