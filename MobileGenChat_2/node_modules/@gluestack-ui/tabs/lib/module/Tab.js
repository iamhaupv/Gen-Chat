function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { useFocusRing, useFocus } from '@react-native-aria/focus';
import React, { memo, useEffect } from 'react';
import { forwardRef } from 'react';
import { useHover, usePress } from '@react-native-aria/interactions';
import { composeEventHandlers } from '@gluestack-ui/utils';
import { useTab } from './TabProvider';
import { useTabs } from './useTabs';
export const Tab = StyledTab => /*#__PURE__*/memo( /*#__PURE__*/forwardRef(({
  value,
  children,
  ...props
}, ref) => {
  const {
    focusProps: focusRingProps,
    isFocusVisible
  } = useFocusRing();
  const {
    pressProps,
    isPressed
  } = usePress({
    isDisabled: props.disabled ?? undefined
  });
  const {
    isFocused,
    focusProps
  } = useFocus();
  const {
    isHovered,
    hoverProps
  } = useHover();
  const {
    onChange,
    currentActiveTab
  } = useTab('TabContext');
  const {
    tabProps
  } = useTabs();
  useEffect(() => {
    if (isFocusVisible) {
      onChange(value);
    }
  }, [isFocusVisible, onChange, value]);
  return /*#__PURE__*/React.createElement(StyledTab, _extends({
    accessiblityRole: "tab",
    ref: ref,
    states: {
      hover: isHovered,
      focus: isFocused,
      active: value === currentActiveTab,
      focusVisible: isFocusVisible
    },
    dataSet: {
      hover: isHovered ? 'true' : 'false',
      focus: isFocused ? 'true' : 'false',
      active: value === currentActiveTab ? 'true' : 'false',
      focusVisible: isFocusVisible ? 'true' : 'false'
    },
    tabIndex: value === currentActiveTab ? 0 : -1
  }, props, {
    onPressIn: composeEventHandlers(props === null || props === void 0 ? void 0 : props.onPressIn, pressProps.onPressIn),
    onPressOut: () => onChange(value),
    onPress: composeEventHandlers(props === null || props === void 0 ? void 0 : props.onPress, pressProps.onPress)
    // @ts-ignore - web only
    ,
    onHoverIn: composeEventHandlers(props === null || props === void 0 ? void 0 : props.onHoverIn, hoverProps.onHoverIn)
    // @ts-ignore - web only
    ,
    onHoverOut: composeEventHandlers(props === null || props === void 0 ? void 0 : props.onHoverOut, hoverProps.onHoverOut)
    // @ts-ignore - web only
    ,
    onFocus: composeEventHandlers(composeEventHandlers(props === null || props === void 0 ? void 0 : props.onFocus, focusProps.onFocus), focusRingProps.onFocus)
    // @ts-ignore - web only
    ,
    onBlur: composeEventHandlers(composeEventHandlers(props === null || props === void 0 ? void 0 : props.onBlur, focusProps.onBlur), focusRingProps.onBlur)
  }, tabProps), typeof children === 'function' ? children({
    hovered: isHovered,
    active: value === currentActiveTab,
    pressed: isPressed,
    focused: isFocused
  }) : children);
}));
//# sourceMappingURL=Tab.js.map