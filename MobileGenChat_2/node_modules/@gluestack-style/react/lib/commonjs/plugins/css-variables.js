"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddCssTokenVariables = void 0;
var _utils = require("../utils");
var _cssInjector = require("../utils/css-injector");
var _react = _interopRequireWildcard(require("react"));
var _StyledProvider = require("../StyledProvider");
var _propertyTokenMap = require("../propertyTokenMap");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
class AddCssTokenVariables {
  styledUtils = {};
  register(styledUtils) {
    if (this.styledUtils) {
      var _this$styledUtils, _this$styledUtils2;
      this.styledUtils.aliases = {
        ...((_this$styledUtils = this.styledUtils) === null || _this$styledUtils === void 0 ? void 0 : _this$styledUtils.aliases),
        ...(styledUtils === null || styledUtils === void 0 ? void 0 : styledUtils.aliases)
      };
      this.styledUtils.tokens = {
        ...((_this$styledUtils2 = this.styledUtils) === null || _this$styledUtils2 === void 0 ? void 0 : _this$styledUtils2.tokens),
        ...(styledUtils === null || styledUtils === void 0 ? void 0 : styledUtils.tokens)
      };
      this.styledUtils.ref = styledUtils === null || styledUtils === void 0 ? void 0 : styledUtils.ref;
    }
    // this.styledUtils = styledUtils;
  }
  constructor(styledUtils) {
    this.register(styledUtils);
    this.name = 'AddCssTokenVariables';
  }
  createCssVariables(tokens, prefix = 'gluestack-') {
    let cssVariables = '';
    for (const [key, value] of Object.entries(tokens)) {
      const variableName = `${prefix}${key}`;
      if (typeof value === 'object') {
        cssVariables += this.createCssVariables(value, `${variableName}-`);
      } else {
        cssVariables += `--${variableName}: ${value};\n`;
      }
    }
    return cssVariables;
  }
  injectCssVariablesGlobalStyle(componentExtendedConfig) {
    (0, _cssInjector.injectGlobalCss)(`:root {${this.createCssVariables(componentExtendedConfig.tokens)}\n};`);
  }
  componentMiddleWare({
    NewComp,
    extendedConfig
  }) {
    return /*#__PURE__*/_react.default.forwardRef((props, ref) => {
      const styledContext = (0, _StyledProvider.useStyled)();
      const CONFIG = (0, _react.useMemo)(() => ({
        ...styledContext.config,
        propertyTokenMap: _propertyTokenMap.propertyTokenMap
      }), [styledContext.config]);
      let componentExtendedConfig = CONFIG;
      if (extendedConfig) {
        componentExtendedConfig = (0, _utils.deepMerge)(CONFIG, extendedConfig);
      }
      this.injectCssVariablesGlobalStyle(componentExtendedConfig);
      return /*#__PURE__*/_react.default.createElement(NewComp, _extends({
        ref: ref
      }, props));
    });
  }
  inputMiddleWare(styledObj) {
    return styledObj;
  }
}
exports.AddCssTokenVariables = AddCssTokenVariables;
//# sourceMappingURL=css-variables.js.map