function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { useMemo } from 'react';
import { useStyled } from '../StyledProvider';
import { propertyTokenMap } from '../propertyTokenMap';
import { deepMerge, setObjectKeyValue } from '../utils';
import { getVariantProps } from '../styled';
import { StyleSheet } from 'react-native';
import { deepClone } from '../utils/cssify/utils/common';
const fontWeights = {
  '100': 'Thin',
  '200': 'ExtraLight',
  '300': 'Light',
  '400': 'Regular',
  '500': 'Medium',
  '600': 'SemiBold',
  '700': 'Bold',
  '800': 'ExtraBold',
  '900': 'Black',
  '950': 'ExtraBlack'
};
const STYLE_FONT_RESOLVER_STRATEGY = 'web';
const tokenizeFontsConfig = (styledObject, {
  fontsTokens,
  fontWeightsTokens
} = {}) => {
  const {
    fontFamily,
    fontWeight
  } = styledObject;
  if (fontFamily !== null && fontFamily !== void 0 && fontFamily.startsWith('$')) {
    const fontFamilyValue = fontFamily.slice(1);
    styledObject.fontFamily = fontsTokens === null || fontsTokens === void 0 ? void 0 : fontsTokens[fontFamilyValue];
  }
  if (typeof fontWeight === 'string' && fontWeight !== null && fontWeight !== void 0 && fontWeight.startsWith('$')) {
    const fontWeightValue = fontWeight.slice(1);
    styledObject.fontWeight = fontWeightsTokens === null || fontWeightsTokens === void 0 ? void 0 : fontWeightsTokens[fontWeightValue];
  }
};
function resolveVariantFontsConfig(variantProps, styledObject) {
  let resolvedVariant = {};
  Object.keys(variantProps).forEach(variant => {
    var _styledObject$variant;
    const variantValue = variantProps[variant];
    const variantObject = styledObject === null || styledObject === void 0 || (_styledObject$variant = styledObject.variants) === null || _styledObject$variant === void 0 || (_styledObject$variant = _styledObject$variant[variant]) === null || _styledObject$variant === void 0 ? void 0 : _styledObject$variant[variantValue];
    resolvedVariant = deepMerge(resolvedVariant, variantObject);
  });
  return resolvedVariant;
}

/* 
  process.env.STYLE_FONT_RESOLVER_STRATEGY= expo | web
  android / ios - font merge logic
  NextJS + web - web logic
  else (assuming it's expo) - Font merge logic
*/

function isExpoStrategy() {
  return !(typeof window !== 'undefined' &&
  //@ts-ignore
  window.next || process.env.STYLE_FONT_RESOLVER_STRATEGY === STYLE_FONT_RESOLVER_STRATEGY || process.env.REACT_APP_STYLE_FONT_RESOLVER_STRATEGY === STYLE_FONT_RESOLVER_STRATEGY || process.env.STORYBOOK_STYLE_FONT_RESOLVER_STRATEGY === STYLE_FONT_RESOLVER_STRATEGY || process.env.NEXT_PUBLIC_STORYBOOK_STYLE_FONT_RESOLVER_STRATEGY === STYLE_FONT_RESOLVER_STRATEGY);
}
export class FontResolver {
  styledUtils = {};
  mapFonts(style) {
    if (isExpoStrategy()) {
      const regex = /^([^_]*_){1,2}[^_]*$/;
      if (style.fontFamily.match(regex)) {
        delete style.fontWeight;
        delete style.fontStyle;
        return;
      }
      let fontFamilyValue = style.fontFamily.replace(/ /g, '').replace(/^\w/, c => c.toUpperCase());
      if (style.fontWeight) {
        fontFamilyValue = `${fontFamilyValue}_${style.fontWeight}`;
        if (typeof style.fontWeight === 'string') {
          fontFamilyValue = `${fontFamilyValue}${fontWeights[style.fontWeight]}`;
        } else if (typeof style.fontWeight === 'number') {
          const fontWeightString = fontWeights[style.fontWeight];
          fontFamilyValue = `${fontFamilyValue}${fontWeightString}`;
        }
      } else {
        fontFamilyValue = `${fontFamilyValue}_400Regular`;
      }
      if (style.fontStyle && style.fontStyle !== 'normal' && typeof style.fontStyle === 'string') {
        const fontStyle = style.fontStyle.replace(/^\w/, c => c.toUpperCase());
        fontFamilyValue = `${fontFamilyValue}_${fontStyle}`;
      }
      style.fontFamily = fontFamilyValue;
      delete style.fontWeight;
      delete style.fontStyle;
    }
  }
  register(styledUtils = {}) {
    if (this.styledUtils) {
      var _this$styledUtils, _this$styledUtils2;
      this.styledUtils.aliases = {
        ...((_this$styledUtils = this.styledUtils) === null || _this$styledUtils === void 0 ? void 0 : _this$styledUtils.aliases),
        ...(styledUtils === null || styledUtils === void 0 ? void 0 : styledUtils.aliases)
      };
      this.styledUtils.tokens = {
        ...((_this$styledUtils2 = this.styledUtils) === null || _this$styledUtils2 === void 0 ? void 0 : _this$styledUtils2.tokens),
        ...(styledUtils === null || styledUtils === void 0 ? void 0 : styledUtils.tokens)
      };
      this.styledUtils.ref = styledUtils === null || styledUtils === void 0 ? void 0 : styledUtils.ref;
    }
  }
  constructor({
    styledUtils,
    mapFonts
  } = {}) {
    this.register(styledUtils);
    this.name = 'FontHandler';
    this.mapFonts = mapFonts || this.mapFonts;
    this.#fontFamily = {};
    this.#fontFamilyTokenConfig = {};
    this.#fontWeightsTokenConfig = {};
  }
  inputMiddleWare(styledObj = {}, shouldUpdate = true, _, Component, componentStyleConfig) {
    const uniqueComponentId = componentStyleConfig === null || componentStyleConfig === void 0 ? void 0 : componentStyleConfig.uniqueComponentId;
    const ignoreKeys = new Set();
    const modifiedStyledObject = this.fontHandler(styledObj, ignoreKeys, shouldUpdate, {}, [uniqueComponentId]);
    if (shouldUpdate) {
      return [styledObj, shouldUpdate, _, Component, ignoreKeys];
    }
    return [modifiedStyledObject, shouldUpdate, _, Component, ignoreKeys];
  }
  #fontFamily;
  #fontFamilyTokenConfig = {};
  #fontWeightsTokenConfig = {};
  fontHandler(styledObject = {}, ignoreKeys, shouldUpdate, fontStyleObject = {}, keyPath = []) {
    for (const styledObjectKey in styledObject) {
      if (typeof styledObject[styledObjectKey] === 'object') {
        keyPath.push(styledObjectKey);
        this.fontHandler(styledObject[styledObjectKey], ignoreKeys, shouldUpdate, fontStyleObject, keyPath);
        keyPath.pop();
      } else if (shouldUpdate) {
        if (styledObjectKey === 'fontFamily') {
          ignoreKeys.add(styledObjectKey);
          this.#fontFamily = setObjectKeyValue(this.#fontFamily, [...keyPath, styledObjectKey], styledObject[styledObjectKey]);
          delete styledObject[styledObjectKey];
        }
        if (styledObjectKey === 'fontWeight') {
          ignoreKeys.add(styledObjectKey);
          this.#fontFamily = setObjectKeyValue(this.#fontFamily, [...keyPath, styledObjectKey], styledObject[styledObjectKey]);
          delete styledObject[styledObjectKey];
        }
        if (styledObjectKey === 'fontStyle') {
          ignoreKeys.add(styledObjectKey);
          this.#fontFamily = setObjectKeyValue(this.#fontFamily, [...keyPath, styledObjectKey], styledObject[styledObjectKey]);
          delete styledObject[styledObjectKey];
        }
      } else if (styledObjectKey === 'fontFamily') {
        ignoreKeys.add(styledObjectKey);
        tokenizeFontsConfig(styledObject, {
          fontsTokens: this.#fontFamilyTokenConfig,
          fontWeightsTokens: this.#fontWeightsTokenConfig
        });
        if (styledObject[styledObjectKey]) {
          this.mapFonts(styledObject);
        }
      }
    }
    return styledObject;
  }
  componentMiddleWare({
    Component: InputComponent,
    extendedConfig,
    componentStyleConfig
  }) {
    var _this$fontFamily, _InputComponent$style;
    const styledConfig = (_this$fontFamily = this.#fontFamily) === null || _this$fontFamily === void 0 ? void 0 : _this$fontFamily[componentStyleConfig === null || componentStyleConfig === void 0 ? void 0 : componentStyleConfig.uniqueComponentId];
    const OutputComponent = /*#__PURE__*/React.forwardRef((props, ref) => {
      var _componentExtendedCon, _componentExtendedCon2;
      const styledContext = useStyled();
      const CONFIG = useMemo(() => ({
        ...styledContext.config,
        propertyTokenMap
      }), [styledContext.config]);
      let componentExtendedConfig = CONFIG;
      if (extendedConfig) {
        componentExtendedConfig = deepMerge(CONFIG, extendedConfig);
      }
      this.#fontFamilyTokenConfig = (_componentExtendedCon = componentExtendedConfig) === null || _componentExtendedCon === void 0 || (_componentExtendedCon = _componentExtendedCon.tokens) === null || _componentExtendedCon === void 0 ? void 0 : _componentExtendedCon.fonts;
      this.#fontWeightsTokenConfig = (_componentExtendedCon2 = componentExtendedConfig) === null || _componentExtendedCon2 === void 0 || (_componentExtendedCon2 = _componentExtendedCon2.tokens) === null || _componentExtendedCon2 === void 0 ? void 0 : _componentExtendedCon2.fontWeights;
      const {
        variantProps,
        restProps
      } = getVariantProps(props, styledConfig);
      const variantStyledObject = resolveVariantFontsConfig(variantProps, styledConfig);
      const styledConfigWithoutVariant = deepClone(styledConfig ?? {});
      delete styledConfigWithoutVariant.variants;
      let componentStyledObject = deepMerge(styledConfigWithoutVariant, variantStyledObject);
      const {
        sx,
        fontWeight,
        fontFamily,
        fontStyle,
        ...rest
      } = restProps;
      if (fontWeight || componentStyledObject.fontWeight) {
        componentStyledObject.fontWeight = fontWeight ?? componentStyledObject.fontWeight;
      }
      if (fontFamily || componentStyledObject.fontFamily) {
        componentStyledObject.fontFamily = fontFamily ?? componentStyledObject.fontFamily;
      }
      if (fontStyle || componentStyledObject.fontStyle) {
        componentStyledObject.fontStyle = fontStyle ?? componentStyledObject.fontStyle;
      }
      const sxPropsWithThemeProps = deepMerge(componentStyledObject, sx);
      const [resolvedSxProps,,,] = this.inputMiddleWare(sxPropsWithThemeProps, false, false, () => /*#__PURE__*/React.createElement(React.Fragment, null));
      let style = rest === null || rest === void 0 ? void 0 : rest.style;
      if (resolvedSxProps.fontFamily) {
        if (Object.keys(resolvedSxProps).length > 0) {
          if (Array.isArray(style)) {
            style = StyleSheet.flatten(style);
            Object.keys(resolvedSxProps).forEach(ele => {
              style[ele] = resolvedSxProps[ele];
            });
          } else {
            Object.keys(resolvedSxProps).forEach(ele => {
              style[ele] = resolvedSxProps[ele];
            });
          }
        }
      }
      return /*#__PURE__*/React.createElement(InputComponent, _extends({}, rest, {
        style: style,
        ref: ref
      }));
    });

    //@ts-ignore
    OutputComponent.styled = {};
    //@ts-ignore
    OutputComponent.styled.config = {};
    //@ts-ignore
    OutputComponent.styled.config = {
      ...(styledConfig === null || styledConfig === void 0 ? void 0 : styledConfig.config),
      ...(InputComponent === null || InputComponent === void 0 || (_InputComponent$style = InputComponent.styled) === null || _InputComponent$style === void 0 ? void 0 : _InputComponent$style.config)
    };

    //@ts-ignore
    OutputComponent.isStyledComponent = InputComponent === null || InputComponent === void 0 ? void 0 : InputComponent.isStyledComponent;
    //@ts-ignore
    OutputComponent.isComposedComponent = InputComponent === null || InputComponent === void 0 ? void 0 : InputComponent.isComposedComponent;
    //@ts-ignore
    OutputComponent.isAnimatedComponent = InputComponent === null || InputComponent === void 0 ? void 0 : InputComponent.isAnimatedComponent;
    OutputComponent.displayName = InputComponent === null || InputComponent === void 0 ? void 0 : InputComponent.displayName;
    return OutputComponent;
  }
}
//# sourceMappingURL=font-resolver.js.map