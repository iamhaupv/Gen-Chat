import { get, onChange, set } from './core/colorMode';
import * as React from 'react';
import { Platform, View } from 'react-native';
import { propertyTokenMap } from './propertyTokenMap';
import { convertTokensToCssVariables, generateMergedThemeTokens, platformSpecificSpaceUnits } from './utils';
import { createGlobalStylesWeb } from './createGlobalStylesWeb';
import { createGlobalStyles } from './createGlobalStyles';
import { injectGlobalCssStyle } from './injectInStyle';
import { ThemeContext, useTheme } from './Theme';
import { useSafeLayoutEffect } from './hooks/useSafeLayoutEffect';
import { resolveThemes } from './createConfig';
let colorModeSet = false;
let rootId = '';
export const defaultConfig = {
  config: {},
  colorMode: 'light',
  components: {}
};
const defaultContextData = defaultConfig;
const StyledContext = /*#__PURE__*/React.createContext(defaultContextData);
const setCurrentColorMode = inputColorMode => {
  if (inputColorMode) {
    const currentColorMode = get();
    if (currentColorMode !== inputColorMode) {
      set(inputColorMode);
    }
    colorModeSet = true;
  }

  // if (inputColorMode) {
  //   set(inputColorMode === 'dark' ? 'dark' : 'light');
  //   colorModeSet = true;
  // }
};
export const StyledProvider = ({
  config,
  colorMode,
  children,
  globalStyles,
  _experimentalNestedProvider
}) => {
  const inlineStyleMap = React.useRef({
    initialStyleInjected: false
  });
  const {
    themes
  } = useTheme();
  const id = React.useId();
  if (rootId === '') {
    rootId = id;
  }
  const isRootProvider = rootId === id;
  const themeContextValue = React.useMemo(() => {
    if (colorMode) {
      return {
        themes: [...themes, colorMode]
      };
    }
    return {
      themes
    };
  }, [colorMode, themes]);
  inlineStyleMap.current.initialStyleInjected = false;
  // const id = React.useId();
  const currentConfig = React.useMemo(() => {
    let configWithPlatformSpecificUnits = platformSpecificSpaceUnits(config, Platform.OS);
    if (config !== null && config !== void 0 && config.themes) {
      Object.keys(config.themes).forEach(key => {
        configWithPlatformSpecificUnits.themes[key] = platformSpecificSpaceUnits(
        //@ts-ignore
        {
          tokens: config.themes[key]
        }, Platform.OS).tokens;
      });
      configWithPlatformSpecificUnits = resolveThemes(configWithPlatformSpecificUnits);
    }
    configWithPlatformSpecificUnits = generateMergedThemeTokens(configWithPlatformSpecificUnits);
    return configWithPlatformSpecificUnits;
  }, [config]);
  if (Platform.OS === 'web' && globalStyles) {
    const globalStyleInjector = createGlobalStylesWeb(globalStyles);
    globalStyleInjector({
      ...currentConfig,
      propertyTokenMap
    });
  }
  if (Platform.OS === 'web') {
    const cssVariables = convertTokensToCssVariables(currentConfig);
    injectGlobalCssStyle(cssVariables, 'variables');
  }
  const currentColorMode = React.useMemo(() => {
    return colorMode;
  }, [colorMode]);
  const _experimentalNestedProviderRef = React.useRef(null);
  React.useEffect(() => {
    let documentElement = null;
    if (Platform.OS === 'web') {
      if (_experimentalNestedProvider) {
        // write own code for nested colorMode
        documentElement = _experimentalNestedProviderRef.current;
      } else {
        documentElement = document.documentElement;
      }
    }
    // Add gs class name
    if (Platform.OS === 'web') {
      documentElement.classList.add(`gs`);
      if (isRootProvider) {
        if (currentColorMode) {
          var _documentElement$quer;
          (_documentElement$quer = documentElement.querySelector('body')) === null || _documentElement$quer === void 0 || _documentElement$quer.setAttribute('data-theme-id', currentColorMode);
          documentElement.classList.add(`gs-${currentColorMode}`);
        } else {
          documentElement.classList.add(`gs-light`);
        }
      }
    }
    onChange(currentColor => {
      // only for web
      if (Platform.OS === 'web' && !_experimentalNestedProvider) {
        const documentElement = document.documentElement;
        if (isRootProvider) {
          if (currentColor) {
            if (currentColor === 'dark') {
              var _documentElement$quer2;
              (_documentElement$quer2 = documentElement.querySelector('body')) === null || _documentElement$quer2 === void 0 || _documentElement$quer2.setAttribute('data-theme-id', 'dark');
              documentElement.classList.remove(`gs-light`);
            } else {
              var _documentElement$quer3;
              (_documentElement$quer3 = documentElement.querySelector('body')) === null || _documentElement$quer3 === void 0 || _documentElement$quer3.setAttribute('data-theme-id', 'light');
              documentElement.classList.remove(`gs-dark`);
            }
            documentElement.classList.add(`gs-${currentColor}`);
          }
        }
      }
    });

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  React.useEffect(() => {
    if (isRootProvider) {
      setCurrentColorMode(currentColorMode);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentColorMode]);
  useSafeLayoutEffect(() => {
    if (Platform.OS === 'web' && typeof window !== 'undefined') {
      const toBeInjectedStyles = {};
      if (inlineStyleMap.current.initialStyleInjected) {
        return;
      }
      Object.keys(inlineStyleMap.current).forEach(key => {
        if (key !== 'initialStyleInjected') {
          const styles = inlineStyleMap.current[key];
          if (!toBeInjectedStyles[key]) {
            toBeInjectedStyles[key] = document.createDocumentFragment();
          }
          styles.forEach(style => {
            if (!document.getElementById(style.id)) {
              toBeInjectedStyles[key].appendChild(style);
            }
          });
        }
      });
      Object.keys(toBeInjectedStyles).forEach(key => {
        let wrapperElement = document.querySelector('#' + key);
        if (wrapperElement) {
          wrapperElement.appendChild(toBeInjectedStyles[key]);
        }
        // delete inlineStyleMap.current[key];
      });
      inlineStyleMap.current.initialStyleInjected = true;
    }
  });
  // // Set colormode for the first time
  if (!colorModeSet && isRootProvider) {
    setCurrentColorMode(currentColorMode);
  }
  const [animationDriverData, setAnimationDriverData] = React.useState();
  const globalStyleMap = (config === null || config === void 0 ? void 0 : config.globalStyle) && createGlobalStyles(config.globalStyle, Platform);
  const contextValue = React.useMemo(() => {
    const styledData = {
      config: currentConfig,
      globalStyle: globalStyleMap,
      animationDriverData,
      setAnimationDriverData,
      inlineStyleMap: inlineStyleMap.current,
      isConfigSet: true
    };
    if (_experimentalNestedProvider) {
      //@ts-ignore
      styledData._experimentalNestedProvider = _experimentalNestedProvider;
      //@ts-ignore
      styledData.colorMode = colorMode;
    }
    return styledData;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentConfig, globalStyleMap, animationDriverData]);
  const providerComponent = /*#__PURE__*/React.createElement(ThemeContext.Provider, {
    value: themeContextValue
  }, /*#__PURE__*/React.createElement(StyledContext.Provider, {
    value: contextValue
  }, children));
  if (_experimentalNestedProvider) {
    return (
      /*#__PURE__*/
      // @ts-ignore
      React.createElement(View, {
        ref: _experimentalNestedProviderRef
      }, providerComponent)
    );
  } else {
    return /*#__PURE__*/React.createElement(React.Fragment, null, providerComponent);
  }
};
export const useStyled = () => React.useContext(StyledContext);
//# sourceMappingURL=StyledProvider.js.map