import { resolvedTokenization } from '../utils';
export function StyledValueToCSSObject(input, CONFIG, ignoreKeys = new Set(), deleteIfTokenNotExist = false) {
  if (!input) {
    return {};
  }
  return resolvedTokenization(input, CONFIG, ignoreKeys, deleteIfTokenNotExist);
}
export function themeStyledValueToCSSObject(input, CONFIG, ignoreKeys = new Set()) {
  let themeResolved1 = {};
  if (CONFIG !== null && CONFIG !== void 0 && CONFIG.themes) {
    // const tokens = deepClone(CONFIG.tokens);
    // Object.keys(CONFIG?.themes).forEach((key: any) => {
    //   const themeTokens = CONFIG?.themes[key];
    //   Object.keys(themeTokens).forEach((tokenKey1: any) => {
    //     Object.keys(themeTokens[tokenKey1]).forEach((tokenKey: any) => {
    //       delete tokens[tokenKey1][tokenKey];
    //     });
    //   });
    // });

    // debugger;

    Object.keys(CONFIG === null || CONFIG === void 0 ? void 0 : CONFIG.themes).forEach(themeName => {
      if (themeName !== 'tokens') {
        var _CONFIG$themes;
        const themeResolved = StyledValueToCSSObject(input, {
          ...CONFIG,
          tokens: CONFIG === null || CONFIG === void 0 || (_CONFIG$themes = CONFIG.themes) === null || _CONFIG$themes === void 0 ? void 0 : _CONFIG$themes.tokens[themeName]
        }, ignoreKeys, true);
        Object.keys(themeResolved).forEach(key => themeResolved[key] === undefined ? delete themeResolved[key] : {});
        themeResolved1[themeName] = themeResolved;
      }
    });
  }
  return themeResolved1;
}
//# sourceMappingURL=StyledValueToCSSObject.js.map