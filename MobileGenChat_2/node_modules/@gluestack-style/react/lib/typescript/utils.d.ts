import type { Config } from './types';
export declare function generateMergedThemeTokens(CONFIG: any): any;
export declare function convertToUnicodeString(inputString: any): string;
export declare function convertFromUnicodeString(inputString: any): string;
export declare function convertTokensToCssVariables(currentConfig: any): string;
export declare const setObjectKeyValue: (obj: any, keys: any, value: any) => any;
export declare const getObjectProperty: (object: any, keyPath: any) => any;
export declare const getCssVariableValue: (_object: any, _keyPath: any) => void;
export declare function resolveAliasesFromConfig(config: any, props: any, ignoreKeys?: Set<any>): any;
export declare function resolveStringToken(stringValue: string, config: any, tokenScaleMap: any, propName: any, scale?: any, useResolvedValue?: boolean, deleteIfTokenNotExist?: boolean): any;
export declare const getTokenFromConfig: (config: any, prop: any, value: any, useResolvedValue?: boolean, deleteIfTokenNotExist?: boolean) => any;
export declare function getResolvedTokenValueFromConfig(config: any, _props: any, prop: any, value: any, useResolvedValue?: boolean, deleteIfTokenNotExist?: boolean): any;
export declare function resolveTokensFromConfig(config: any, props: any, useResolvedValue?: boolean, deleteIfTokenNotExist?: boolean): any;
export declare function resolvedTokenization(props: any, config: any, ignoreKeys?: Set<any>, deleteIfTokenNotExist?: boolean): any;
export declare const deepMerge: (target: any, source: any) => any;
export declare const shallowMerge: (target: any, source: any) => any;
export declare function deepMergeObjects(...objects: any): any;
export declare const deepMergeArray: (target: any, source: any) => any;
export declare const BASE_FONT_SIZE = 16;
export declare const convertAbsoluteToRem: (px: number) => string;
export declare const convertAbsoluteToPx: (px: number) => string;
export declare const convertRemToAbsolute: (rem: number) => number;
export declare const platformSpecificSpaceUnits: (theme: Config, platform: string) => {
    alias: {
        [K: string]: any;
    };
    tokens: {
        colors: {
            [K: string]: any;
        };
        mediaQueries: {
            [K: string]: any;
        };
    };
};
export declare function extractWidthValues(condition: string): number[];
export declare function addThemeConditionInMeta(originalThemeObject: any, CONFIG: any): any;
export declare function resolvePlatformTheme(theme: any, platform: any): void;
//# sourceMappingURL=utils.d.ts.map