{"version":3,"sources":["useAccordion.ts"],"names":["useAccordion","props","type","isCollapsible","selectedValues","setSelectedValues","toggleItem","itemValue","isDisabled","includes","filter","v","state"],"mappings":"AAOA,OAAO,MAAMA,YAAY,GAAIC,KAAD,IAAkB;AAC5C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,aAAR;AAAuBC,IAAAA,cAAvB;AAAuCC,IAAAA;AAAvC,MAA6DJ,KAAnE;AAEA;AACF;AACA;AACA;AACA;;AACE,QAAMK,UAAU,GAAG,CAACC,SAAD,EAAoBC,UAAU,GAAG,KAAjC,KAA2C;AAC5D,QAAIA,UAAU,IAAI,CAACD,SAAnB,EAA8B;;AAE9B,QAAIL,IAAI,KAAK,QAAb,EAAuB;AACrB,UAAIC,aAAJ,EAAmB;AACjB,YAAIC,cAAc,CAACK,QAAf,CAAwBF,SAAxB,CAAJ,EAAwC;AACtCF,UAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD,SAFD,MAEO;AACLA,UAAAA,iBAAiB,CAAC,CAACE,SAAD,CAAD,CAAjB;AACD;AACF,OAND,MAMO;AACL,YAAIH,cAAc,CAACK,QAAf,CAAwBF,SAAxB,CAAJ,EAAwC;AACxCF,QAAAA,iBAAiB,CAAC,CAACE,SAAD,CAAD,CAAjB;AACD;AACF,KAXD,MAWO;AACL,UAAIJ,aAAJ,EAAmB;AACjB,YAAIC,cAAc,CAACK,QAAf,CAAwBF,SAAxB,CAAJ,EAAwC;AACtCF,UAAAA,iBAAiB,CAACD,cAAc,CAACM,MAAf,CAAuBC,CAAD,IAAOA,CAAC,KAAKJ,SAAnC,CAAD,CAAjB;AACD,SAFD,MAEO;AACLF,UAAAA,iBAAiB,CAAC,CAAC,GAAGD,cAAJ,EAAoBG,SAApB,CAAD,CAAjB;AACD;AACF,OAND,MAMO;AACL,YAAIH,cAAc,CAACK,QAAf,CAAwBF,SAAxB,CAAJ,EAAwC;AACxCF,QAAAA,iBAAiB,CAAC,CAAC,GAAGD,cAAJ,EAAoBG,SAApB,CAAD,CAAjB;AACD;AACF;AACF,GA1BD;;AA4BA,SAAO;AACLK,IAAAA,KAAK,EAAE;AACLR,MAAAA,cADK;AAELE,MAAAA;AAFK;AADF,GAAP;AAMD,CA1CM","sourcesContent":["type Props = {\n  type: 'single' | 'multiple';\n  isCollapsible: boolean;\n  selectedValues: string[];\n  setSelectedValues: (values: string[]) => void;\n};\n\nexport const useAccordion = (props: Props) => {\n  const { type, isCollapsible, selectedValues, setSelectedValues } = props;\n\n  /*\n   * The toggleItem function is responsible for updating the selected values\n   * based on the type of accordion (single or multiple) and whether or not\n   * the accordion is collapsible.\n   */\n  const toggleItem = (itemValue: string, isDisabled = false) => {\n    if (isDisabled || !itemValue) return;\n\n    if (type === 'single') {\n      if (isCollapsible) {\n        if (selectedValues.includes(itemValue)) {\n          setSelectedValues([]);\n        } else {\n          setSelectedValues([itemValue]);\n        }\n      } else {\n        if (selectedValues.includes(itemValue)) return;\n        setSelectedValues([itemValue]);\n      }\n    } else {\n      if (isCollapsible) {\n        if (selectedValues.includes(itemValue)) {\n          setSelectedValues(selectedValues.filter((v) => v !== itemValue));\n        } else {\n          setSelectedValues([...selectedValues, itemValue]);\n        }\n      } else {\n        if (selectedValues.includes(itemValue)) return;\n        setSelectedValues([...selectedValues, itemValue]);\n      }\n    }\n  };\n\n  return {\n    state: {\n      selectedValues,\n      toggleItem,\n    },\n  };\n};\n"]}