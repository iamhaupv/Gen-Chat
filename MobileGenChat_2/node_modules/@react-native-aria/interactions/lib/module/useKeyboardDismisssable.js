import React from 'react';
import { useEffect } from 'react';
import { BackHandler, Platform } from 'react-native';
let keyboardDismissHandlers = [];
export const keyboardDismissHandlerManager = {
  push: handler => {
    keyboardDismissHandlers.push(handler);
    return () => {
      keyboardDismissHandlers = keyboardDismissHandlers.filter(h => h !== handler);
    };
  },
  length: () => keyboardDismissHandlers.length,
  pop: () => {
    return keyboardDismissHandlers.pop();
  }
};

/**
 * Handles attaching callback for Escape key listener on web and Back button listener on Android
 */
export const useKeyboardDismissable = ({
  enabled,
  callback
}) => {
  React.useEffect(() => {
    let cleanupFn = () => {};
    if (enabled) {
      cleanupFn = keyboardDismissHandlerManager.push(callback);
    } else {
      cleanupFn();
    }
    return () => {
      cleanupFn();
    };
  }, [enabled, callback]);
  useBackHandler({
    enabled,
    callback
  });
};
export function useBackHandler({
  enabled,
  callback
}) {
  useEffect(() => {
    if (Platform.OS === 'web') {
      var _document, _document$addEventLis;
      const handleEscape = e => {
        if (e.key === 'Escape') {
          callback();
        }
      };
      (_document = document) === null || _document === void 0 || (_document = _document.body) === null || _document === void 0 || (_document$addEventLis = _document.addEventListener) === null || _document$addEventLis === void 0 || _document$addEventLis.call(_document, 'keyup', handleEscape);
      return () => {
        var _document2, _document2$removeEven;
        (_document2 = document) === null || _document2 === void 0 || (_document2 = _document2.body) === null || _document2 === void 0 || (_document2$removeEven = _document2.removeEventListener) === null || _document2$removeEven === void 0 || _document2$removeEven.call(_document2, 'keyup', handleEscape);
      };
    } else {
      let backHandler = () => {
        callback();
        return true;
      };
      if (enabled) {
        BackHandler.addEventListener('hardwareBackPress', backHandler);
      } else {
        BackHandler.removeEventListener('hardwareBackPress', backHandler);
      }
      return () => BackHandler.removeEventListener('hardwareBackPress', backHandler);
    }
  }, [enabled, callback]);
}
//# sourceMappingURL=useKeyboardDismisssable.js.map